{"version":3,"sources":["components/game/Game.js","App.js","serviceWorker.js","index.js"],"names":["Game","candyTypes","candyColor","icon","state","grid","createGrid","leftClick","bind","Array","from","Object","assign","createCell","this","Math","floor","random","i","j","sameColorConnectedCandyCells","loop","push","length","stringArray","concat","findConnectedCandyCells","map","JSON","stringify","uniqueStringArray","Set","parse","checkCanBurst","cell","console","log","setState","arr","countX","countY","dictX","dictY","max","g","c","p","q","className","row","key","button","btnClass","join","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9bc05769.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Game.css';\n\nexport default class Game extends Component {\n  constructor() {\n    super();\n\n    this.candyTypes = [\n      {\n        candyColor: 'red',\n        icon: 'r',\n      },\n      {\n        candyColor: 'green',\n        icon: 'g',\n      },\n      {\n        candyColor: 'blue',\n        icon: 'b',\n      },\n      {\n        candyColor: 'yellow',\n        icon: 'y',\n      },\n    ];\n\n    this.state = {\n      candyTypes: this.candyTypes,\n      grid: this.createGrid(),\n    };\n\n    this.leftClick = this.leftClick.bind(this);\n  }\n\n  createGrid() {\n    return Array.from(Array(10), () => Array.from(Array(10), () => Object.assign({}, this.createCell())));\n  }\n\n  createCell() {\n    return Object.assign({}, this.candyTypes[Math.floor(Math.random() * 3)]);\n  }\n\n  leftClick(i, j) {\n    let grid = this.state.grid;\n    let sameColorConnectedCandyCells = [];\n\n    let loop = 0;\n    sameColorConnectedCandyCells.push([i, j]);\n\n    while (loop < sameColorConnectedCandyCells.length) {\n      sameColorConnectedCandyCells = sameColorConnectedCandyCells.concat(\n        this.findConnectedCandyCells(\n          grid,\n          grid[i][j],\n          sameColorConnectedCandyCells[loop][0],\n          sameColorConnectedCandyCells[loop][1]\n        )\n      );\n\n      let stringArray = sameColorConnectedCandyCells.map(JSON.stringify);\n      let uniqueStringArray = new Set(stringArray);\n      sameColorConnectedCandyCells = Array.from(uniqueStringArray, JSON.parse);\n\n      loop++;\n    }\n\n    if (this.checkCanBurst(sameColorConnectedCandyCells)) {\n      for (let cell of sameColorConnectedCandyCells) {\n        grid[cell[0]][cell[1]] = {};\n      }\n    } else {\n      console.log('Cant burst');\n    }\n\n    this.setState({ grid: grid });\n  }\n\n  checkCanBurst(arr) {\n    let i = 0;\n    let countX = 0,\n      countY = 0,\n      dictX = {},\n      dictY = {};\n    while (countX <= 2 && countY <= 2 && i < arr.length) {\n      if (arr[i][0] in dictX) {\n        dictX[arr[i][0]] += 1;\n        countX = Math.max(countX, dictX[arr[i][0]]);\n      } else {\n        dictX[arr[i][0]] = 1;\n      }\n\n      if (arr[i][1] in dictY) {\n        dictY[arr[i][1]] += 1;\n        countY = Math.max(countY, dictY[arr[i][1]]);\n      } else {\n        dictY[arr[i][1]] = 1;\n      }\n\n      i++;\n    }\n\n    return countX > 2 || countY > 2 ? true : false;\n  }\n\n  findConnectedCandyCells(g, c, i, j) {\n    let arr = [];\n    let p, q;\n    p = i;\n    q = j;\n    // Check North\n    if (p - 1 >= 0 && g[p - 1][q].candyColor === c.candyColor) {\n      arr.push([p - 1, q]);\n    }\n    // Check South\n    if (p + 1 < g.length && g[p + 1][q].candyColor === c.candyColor) {\n      arr.push([p + 1, q]);\n    }\n    // Check West\n    if (q - 1 >= 0 && g[p][q - 1].candyColor === c.candyColor) {\n      arr.push([p, q - 1]);\n    }\n    // Check East\n    if (q + 1 < g.length && g[p][q + 1].candyColor === c.candyColor) {\n      arr.push([p, q + 1]);\n    }\n\n    return arr;\n  }\n\n  render() {\n    return (\n      <div className=\"grid\">\n        {this.state.grid.map((row, i) => {\n          return (\n            <div className=\"row\" key={i}>\n              {row.map((cell, j) => {\n                let button;\n                if (cell.icon) {\n                  button = (\n                    <span>\n                      {i},{j},{cell.icon}\n                    </span>\n                  );\n                }\n\n                let btnClass = ['cell', cell.candyColor];\n                btnClass = btnClass.join(' ');\n                return (\n                  <div className={btnClass} key={j} onClick={this.leftClick.bind(this, i, j)}>\n                    {button}\n                  </div>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\n\nimport Game from './components/game/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}